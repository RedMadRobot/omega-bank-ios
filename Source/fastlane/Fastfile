default_platform(:ios)

app_bundleid              = "com.redmadrobot.OmegaBank"
app_appstore_bundleid     = "com.redmadrobot.OmegaBank" # TODO
app_provisioning          = "OmegaBank Distribution" # TODO
app_appstore_provisioning = "OmegaBank Store Distribution" # TODO
app_project_path          = "../OmegaBank.xcodeproj"
app_workspace             = "OmegaBank.xcworkspace"
app_project               = "OmegaBank.xcodeproj"
app_ui_test_target        = "OmegaBankUITests"
app_target                = "OmegaBank"
app_qa_scheme             = "QA"
app_debug_scheme          = "Debug"
app_appstore_scheme       = "App-Store"
app_tests_output_path     = "fastlane/xcov_output/OmegaBank"
app_iconset               = "../OmegaBank/Resources/Assets.xcassets/AppIcon.appiconset"
app_default_team_id       = "Redmadrobot OOO"


desc "Run all tests"
lane :test do |options|
  clean_cocoapods_cache
  cocoapods
  
  begin
    if options[:ui_tests]
      run_tests
    else
      run_tests(
        skip_testing: [app_ui_test_target]
      )
    end
  ensure
    xcov(
      workspace: app_workspace,
      scheme: app_debug_scheme,
      only_project_targets: true,
      output_directory: app_tests_output_path
    )
    if is_ci
      Dir.chdir("../../") do
        sh "bundle exec danger --dangerfile=Source/Dangerfile"
      end
    end
  end
  
end

desc "Предварительный этап сборки, выполняется локально."
desc "Увеличиваем билд-номер и ставим тег для сборки на CI"
lane :ci do
  bump_build

  tag = "#{qa}/#{get_version_number}/#{get_build_number}"
  add_git_tag(tag: tag)
  push_to_git_remote()
end

desc "Сборка для тестировщиков (в firebase)"
lane :qa do

  # Проверить что нет незакомиченных файлов
  ensure_git_status_clean

  # Скачиванием поды
  cocoapods

  # Выгружаем ExportOptions
  export_options = "OmegaBank/Supporting Files/ExportOptions.plist"

  version = formatted_version(get_build_number)
  team_id = CredentialsManager::AppfileConfig.try_fetch_value(:team_id)
  
  # Скомпилировать и подписать приложение
  ipa_path = gym(
    scheme: app_qa_scheme,
    export_options: export_options
  )
  
  # Выложить в firebase
  firebase_app_distribution(
    groups: "testers",
    ipa_path: ipa_path
  )

  # Удалить артефакты ipa и тд.
  clean_build_artifacts

end

desc "Поднимаем номер билда"
private_lane :bump_build do
  increment_build_number
  version = formatted_version(get_build_number)
  commit_version_bump(
    message: "Поднята версия #{version}",
    force: true,
    xcodeproj: app_project
  )
end

#####################################################
# @!group Helpers
#####################################################

# Получить полную версию с билд-номером.
def formatted_version(build)
  "#{get_version_number}(#{build})"
end